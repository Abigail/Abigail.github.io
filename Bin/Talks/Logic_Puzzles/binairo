#!/opt/perl/bin/perl

use 5.038;

use strict;
use warnings;
no  warnings 'syntax';

use Getopt::Long;
use Time::HiRes qw [time];

binmode STDOUT, ":utf8";

my $WHITE = "\x{25CB}";
my $BLACK = "\x{25CF}";

GetOptions 'subject'           =>  \my $do_subject,
           'pattern'           =>  \my $do_pattern,
           'solve'             =>  \my $do_solve,
           'escape'            =>  \my $escape,
           'playback'          =>  \my $playback,
           'fake'              =>  \my $fake,
           'cols'              =>  \my $columns,
           'type=i'            =>  \my $type,
           'statistics|stats'  =>  \my $statistics,
           'optimize'          =>  \my $optimize,
;

if ($fake) {
    $WHITE = 0;
    $BLACK = 1;
}

$do_subject  ||= 1 if $columns;
$do_pattern  ||= 1 if $columns;
$do_solve      = 1 unless $do_subject || $do_pattern;
$do_solve    ||= 1 if $playback || $statistics;
$type        ||= 1;

my $rows = 0;
my $cols = 0;
my $start;
my $end;
my %given;

my sub label ($r, $c) {"R${r}C${c}"}

my $board = [];

my $r = 0;
while (<>) {
    $r ++;
    my $c = 0;
    foreach my $given (/\S+/g) {
        $c ++;
        if ($given ne ".") {
            my $label = label $r, $c;
            $given {$label} = $given eq "0" ? $WHITE
                            : $given eq "1" ? $BLACK
                            :  die "Don't know how to parse $given";
        }
        $cols = $c if $cols < $c;
    }
    $rows = $r if $rows < $r;
}

my $subject = "";
my $pattern = "";

my @done;

sub no_3_in_a_row ($type, @cells) {
    my ($label1, $label2, $label3) = map {label @$_} @cells;
    my $subject = "";
    my $pattern = "";
    if ($type == 1) {
        # "001011011100101110" =~
        # /(?:[01]{3})*\g{1}\g{2}\g{3}(?:[01]{3})*;/
        $subject .= "${WHITE}${WHITE}${BLACK}" .
                    "${WHITE}${BLACK}${WHITE}" .
                    "${WHITE}${BLACK}${BLACK}" .
                    "${BLACK}${WHITE}${WHITE}" .
                    "${BLACK}${WHITE}${BLACK}" .
                    "${BLACK}${BLACK}${WHITE};";
        $pattern .= "(?:[${WHITE}${BLACK}]{3})*";
        $pattern .= "\\g{$label1}\\g{$label2}\\g{$label3}";
        $pattern .= "(?:[${WHITE}${BLACK}]{3})*;";
    }
    elsif ($type == 2) {
        # "01" =~ /(?:\g{1}\g{2}|\g{1}\g{3}|\g{2}\g{1}|
        #             \g{2}\g{3}|\g{3}\g{1}|\g{3}\g{2})/
        $subject .= "${WHITE}${BLACK};";
        $pattern .= "(?:\\g{$label1}\\g{$label2}|" .
                       "\\g{$label1}\\g{$label3}|" .
                       "\\g{$label2}\\g{$label1}|" .
                       "\\g{$label2}\\g{$label3}|" .
                       "\\g{$label3}\\g{$label1}|" .
                       "\\g{$label3}\\g{$label2});";
    }
    elsif ($type == 3 || $type == 4) {
        $subject .= "${WHITE};${BLACK};";
        if ($type == 3) {
            # "0;" =~ /\g{1}?\g{2}?\g{3}?;/
            # "1;" =~ /\g{1}?\g{2}?\g{3}?;/
            $pattern .= "\\g{$label1}?\\g{$label2}?\\g{$label3}?;" x 2;
        }
        else {
            # "0;" =~ /(?:\g{1}|\g{2}|\g{3});/
            # "1;" =~ /(?:\g{1}|\g{2}|\g{3});/
            $pattern .= "(?:\\g{$label1}|\\g{$label2}|\\g{$label3});" x 2;
        }
    }
    elsif ($type == 5 || $type == 6) {
        $subject .= "${WHITE}${BLACK};";
        if ($type == 5) {
            # "01;" =~ /\g{1}?\g{2}?\g{3}?\g{1}?\g{2}?\g{3}?;/
            $pattern .= "\\g{$label1}?\\g{$label2}?\\g{$label3}?" x 2;
        }
        else {
            # "01;" =~ /(?:\g{1}|\g{2}|\g{3})(?:\g{1}|\g{2}|\g{3});/
            $pattern .= "(?:\\g{$label1}|\\g{$label2}|\\g{$label3})" x 2;
        }
        $pattern .= ";"
    }
    else {
        ...
    }
    return ($subject, $pattern)
}


sub optimize ($pattern) {
    $pattern =~ s/;$//;
    return $optimize ? "(?>$pattern);" : "(?:$pattern);"
}


foreach my $r (1 .. $rows) {
    foreach my $c (1 .. $cols) {
        my $label = label $r, $c;
        my $cell  = $$board [$r] [$c];

        if (defined $given {$label}) {
            my $given =  $given {$label};
            $subject .= "$given;";
            $pattern .= "(?<$label>$given);"
        }
        else {
            $subject .= "${WHITE}${BLACK};";
            $pattern .= "${WHITE}?(?<$label>[${WHITE}${BLACK}])${BLACK}?;";
            $pattern .= qq <(?{say '$label = ', \$^N})> if $playback;
        }

        #
        # No three in a row horizontally
        #
        if ($c > 2) {
            my ($s, $p) = no_3_in_a_row ($type, map {[$r, $c - $_]} 0 .. 2);
            $subject .= $s;
            $pattern .= $p;
        }

        #
        # No three in a row vertically
        #
        if ($r > 2) {
            my ($s, $p) = no_3_in_a_row ($type, map {[$r - $_, $c]} 0 .. 2);
            $subject .= $s;
            $pattern .= $p;
        }

        #
        # Equal number of symbols in a row
        #
        if ($c == $cols) {
            foreach my $t ($WHITE, $BLACK) {
                $subject .= "$t" x ($cols / 2);
                $subject .= ";";
                my $pat = "";
                foreach my $cp (1 .. $cols) {
                    my $label = label $r, $cp;
                    $pat     .= "\\g{$label}?";
                }
                $pattern .= optimize $pat;
            }
        }
        #
        # Equal number of symbols in a column
        #
        if ($r == $rows) {
            foreach my $t ($WHITE, $BLACK) {
                $subject .= "$t" x ($rows / 2);
                $subject .= ";";
                my $pat = "";
                foreach my $rp (1 .. $r) {
                    my $label = label $rp, $c;
                    $pat .= "\\g{$label}?";
                }
                $pattern .= optimize $pat;
            }
        }
        #
        # Unequal rows; make sure previous rows differ
        #
        if ($c == $cols) {
            foreach my $rp (1 .. $r - 1) {
                $subject .= "${WHITE}${BLACK};";
                my $pat   = "";
                foreach my $cc (1 .. $cols) {
                    my $label1 = label $rp, $cc;
                    my $label2 = label $r,  $cc;
                    $pat .= "\\g{$label1}\\g{$label2}|" .
                            "\\g{$label2}\\g{$label1}|";
                }
                $pat =~ s/\|$//;
                $pattern .= optimize $pat;
            }
        }
        #
        # Unequal columns; make sure previous columns differ
        #
        if ($r == $rows) {
            foreach my $cp (1 .. $c - 1) {
                $subject .= "${WHITE}${BLACK};";
                my $pat   = "";
                foreach my $rr (1 .. $rows) {
                    my $label1 = label $rr, $cp;
                    my $label2 = label $rr, $c;
                    $pat .= "\\g{$label1}\\g{$label2}|" .
                            "\\g{$label2}\\g{$label1}|";
                }
                $pat =~ s/\|$//;
                $pattern .= optimize $pat;
            }
        }
    }
}


if ($do_solve) {
    use re 'eval';
    $start = time;
    my $r = $subject =~ /^$pattern$/;
    $end = time;
    if ($r) {
        for my $r (1 .. $rows) {
            for my $c (1 .. $cols) {
                my $label = label $r, $c;
                my $value = $+ {$label};
                if ($fake) {
                    $value = $value =~ s/0/\x{25CB}/gr
                                    =~ s/1/\x{25CF}/gr;
                }
                if ($escape) {
                    $value = $value =~ s/\x{25CB}/&#x25CB;/gr
                                    =~ s/\x{25CF}/&#x25CF;/gr;
                }
                print $value, " ";
            }
            print "\n";
        }
    }
    else {
        say "No solution";
    }
}

if ($escape) {
    $_ =  s/$WHITE/%%WHITE%%/gr
       =~ s/$BLACK/%%BLACK%%/gr for $subject, $pattern
}
if ($columns) {
    use List::Util qw [max];
    my @subs  = split /;/ => $subject;
    my @pats  = split /;/ => $pattern;
    my $width = max map {length} @subs;
    foreach my $i (keys @subs) {
        printf "%${width}s  %s\n", $subs [$i], $pats [$i];
    }
}
else {
    say $subject if $do_subject;
    say $pattern if $do_pattern;
}

if ($statistics) {
    my @args = (length ($subject),
                length ($pattern),
                $subject =~ y/;/;/,
                $pattern =~ y/g/g/,
                $end - $start);
    printf <<~ "--" => @args;
        Subject: %d characters
        Pattern: %d characters
        Number of statements: %d
        Number of backreferences: %d
        Run time: %.3f seconds
        --
}

__END__
