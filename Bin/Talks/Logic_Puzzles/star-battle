#!/opt/perl/bin/perl

use 5.038;

use strict;
use warnings;
no  warnings 'syntax';

use Getopt::Long;

GetOptions 'table'    =>  \my $do_table,
           'subject'  =>  \my $do_subject,
           'pattern'  =>  \my $do_pattern,
           'solve'    =>  \my $do_solve,
           'escape'   =>  \my $escape,
           'amount=i' =>  \my $amount,
;

binmode STDOUT, ":utf8";

$do_solve = 1 unless $do_table || $do_subject || $do_pattern;
$amount //= 1;

my $rows = 0;
my $cols = 0;
my %groups;
my $board;

my sub same_group ($r1, $c1, $r2, $c2) {
    return if $r1 < 0 || $r1 >= $rows ||
              $c1 < 0 || $c1 >= $cols ||
              $r2 < 0 || $r2 >= $rows ||
              $c2 < 0 || $c2 >= $cols;
    return $$board [$r1] [$c1] eq $$board [$r2] [$c2];
}

my sub same_line ($r1, $c1, $r2, $c2) {
    return $r1 == $r2 || $c1 == $c2
}

my sub can_touch ($r1, $c1, $r2, $c2) {
    return abs ($r1 - $r2) <= 1 && abs ($c1 - $c2) <= 1
}


my sub label ($r, $c) {"R${r}C${c}"}

my $r = 0;
while (<>) {
    last if /^\s*$/;
    my $c = 0;
    foreach my $group (/\S+/g) {
        my $label = "R${r}C${c}";
        push @{$groups {$group}} => $label;
        $$board [$r] [$c] = $group;
        $c ++;
        $cols = $c if $cols < $c;
    }
    $r ++;
    $rows = $r if $rows < $r;
}

my $STAR    = "\x{2725}";

my $subject = "";
my $pattern = "";
my $table   = "<table>";

my @done;


foreach my $r (0 .. $rows - 1) {
    $table .= "<tr>\n";
    foreach my $c (0 .. $cols - 1) {
        my $label = label $r, $c;
        my $group = $$board [$r] [$c];

        my @classes = "cell-$r-$c";
        my $up    = [$r - 1, $c];
        my $down  = [$r + 1, $c];
        my $left  = [$r,     $c - 1];
        my $right = [$r,     $c + 1];

        push @classes => "tb" unless same_group $r, $c, @$up;
        push @classes => "bb" unless same_group $r, $c, @$down;
        push @classes => "lb" unless same_group $r, $c, @$left;
        push @classes => "rb" unless same_group $r, $c, @$right;
 
        local $" = " ";
        $table  .= "    <td class = '@classes'>";
        $table  .= "</td>\n";

        #
        # Pick up a value
        #
        $subject .= "$STAR;";
        $pattern .= "(?<$label>$STAR?)$STAR?;";

        #
        # If this cell touches an already seen cell, then cannot
        # both contain a star.
        #
        foreach my $done (@done) {
            my ($dr, $dc) = @$done;

            if (can_touch ($r, $c, $dr, $dc)) {
                my $dlabel = label ($dr, $dc);
                $subject  .= "$STAR;";
                $pattern  .= "\\g{$label}\\g{$dlabel}$STAR?;";
            }
        }

        #
        # If this is the last cell on a row, check we have the
        # right amount of stars
        #
        if ($c == $cols - 1) {
            $subject .= $STAR x $amount;
            $subject .= ";";

            foreach my $cd (0 .. $cols - 1) {
                my $label = label $r, $cd;
                $pattern .= "\\g{$label}";
            }
            $pattern .= ";";
        }

        #
        # If this is the last cell in a column, check we have the
        # right amount of stars
        #
        if ($r == $rows - 1) {
            $subject .= $STAR x $amount;
            $subject .= ";";

            foreach my $rd (0 .. $rows - 1) {
                my $label = label $rd, $c;
                $pattern .= "\\g{$label}";
            }
            $pattern .= ";";
        }

        #
        # If this is the last cell in a group, check we have the
        # right amount of stars
        #
        if ($label eq $groups {$group} [-1]) {
            $subject .= $STAR x $amount;
            $subject .= ";";

            foreach my $d (@done) {
                if (same_group $r, $c, @$d) {
                    my $label = label @$d;
                    $pattern .= "\\g{$label}";
                }
            }
            $pattern .= "\\g{$label}";
            $pattern .= ";";
        }

        push @done => [$r, $c];
    }
    $table .= "</tr>\n";
}
$table .= "</table>";

if ($do_solve) {
    if ($subject =~ /^$pattern$/) {
        for my $r (0 .. $rows - 1) {
            for my $c (0 .. $cols - 1) {
                print $+ {"R${r}C${c}"} ? $escape ? "%%STAR%%"
                                                  :   $STAR
                                        : ".";
                print " ";
            }
            print "\n";
        }
    }
    else {
        say "No solution";
    }
}

$subject =~ s/$STAR/%%STAR%%/g if $escape;
$pattern =~ s/$STAR/%%STAR%%/g if $escape;

say $table   if $do_table;
say $subject if $do_subject;
say $pattern if $do_pattern;

__END__
