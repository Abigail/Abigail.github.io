#!/opt/perl/bin/perl

use 5.028;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use Text::Markdown qw [markdown];

my $POLYFILL_URL  = "https://polyfill.io/v3/polyfill.min.js?features=es6";
my $MATHJAX_URL   = "https://cdn.jsdelivr.net/npm/mathjax@3/" .
                            "es5/tex-mml-chtml.js";

my $HOME           = $ENV {HOME};
my $TOP_DIR        = "$HOME/GitHub/Blogs";
my $SRC_DIR        = "Src";
my $HTML_DIR       = "HTML";
my $PWC_DIR        = "Perl-Weekly-Challenge";
my $STYLE_DIR      = "Styles";
my $FULL_HTML_DIR  = "$TOP_DIR/$HTML_DIR";
my $FULL_SRC_DIR   = "$TOP_DIR/$SRC_DIR";
my $FONT_URL       = "https://fonts.googleapis.com/css?family";
my @FONTS          = map {s/ /+/r} ("Lobster Two",
                                    "Source Code Pro&display=swap");
my $PERLFUNC_URL   = "https://perldoc.perl.org/perlfunc";
my $METACPAN_URL   = "https://metacpan.org/pod";

my $GITHUB_URL     = "https://github.com";
my $GITHUB_USER    = "Abigail";
my $GITHUB_REPO    = "perlweeklychallenge-club";
my $GITHUB_BRANCH  = "master";
my $CHALLENGE_USER = "abigail";

my %LANGUAGE_INFO = (
    AWK      => {},
    Bash     => {                ext => "sh"},
    C        => {},
    Lua      => {},
   "Node.js" => {name => "node", ext => "js"},
    Perl     => {                ext => "pl"},
    Python   => {                ext => "py"},
    Ruby     => {                ext => "rb"},
);

chdir $TOP_DIR or die "chdir: $!";

my $FONTS = join "\n" => map {
    "<link rel = 'stylesheet' href = '$FONT_URL=$_'>"
} @FONTS;


sub header ($title, $week) {
    #
    # Return the header of the HTML page
    #

    my $styles = join "" =>
        map  {"<link rel = 'stylesheet' href = '../../$_'>"}
        grep {-f}
        map  {"$STYLE_DIR/$_.css"} "main",
                        "$PWC_DIR/main",
                        "$PWC_DIR/week-$week";

    return <<~ "--";
        <head>
        <title>$title</title>
        <script src = "$POLYFILL_URL"></script>
        <script id = "MathJax-script" async src = "$MATHJAX_URL"></script>
        $styles
        $FONTS
        </head>
        --
}

#
# Create a link to the full program on GitHub
#
sub full_program ($language, $week) {
    my ($week_nr, $part_nr) = split /-/ => $week;
    my  $lang_info = $LANGUAGE_INFO {$language};
    my $link = sprintf "%s/%s/%s/blob/%s/challenge-%03d/%s/%s/ch-%d.%s" =>
                        $GITHUB_URL,
                        $GITHUB_USER,
                        $GITHUB_REPO,
                        $GITHUB_BRANCH,
                        $week_nr,
                        $CHALLENGE_USER,
                        $$lang_info {name} || lc $language,
                        $part_nr,
                        $$lang_info {ext}  || lc $language;

    return "Find the [full program]($link) on [GitHub]($GITHUB_URL).";
}

sub pre_process_lang ($language, $text, $week) {
    if ($language eq "Perl") {
        #
        # Make links. We recognize the following:
        #
        #   [word](#)           ->  Link to perlfunc
        #   [word(::word)+](#)  ->  Link to MetaCpan
        #
        # The parts between the [] can be optionally surrounded by backtics
        #
        $text =~ s {(?<anchor>
                        \[`?
                            (?:(?<func>  \w+) | 
                               (?<module>\w+(?:::\w+)+))
                          `?\])
                     \(\#\)}
                   {$+ {anchor} . "(" . 
                       ($+ {func}   ? $PERLFUNC_URL . "#" . $+ {func}
                      : $+ {module} ? $METACPAN_URL . "/" . $+ {module}
                      : "???") . ")"}gex;
    }

    $text =~ s {^FULL_PROGRAM\s*$} {full_program ($language, $week)}gem;

    $text;
}


sub pre_process ($text, $week) {
    #
    # Turn sections between ~~~~ into preformatted text
    #
    $text =~ s {^~~~~$(.*?)^~~~~$}
               {join "\n" => map {"    $_"} split ("\n", $1)}gems;

    $text =~ s {^(?<pre>###\s+(?<lang>Perl))(?<text>.*?)(?<post>^###|\Z)}
               {$+ {pre} . pre_process_lang ($+ {lang}, $+ {text}, $week) .
                $+ {post}}gems;

    $text;
}

sub post_process ($text) {
    #
    # Turn sections between headers into divs
    #
    $text =~ s {(</h[1-6]>\s*)(<p>.*?\S)(\s*(?:<h[1-6]>|</body>))}
               {$1<div class = "section">\n$2</div>$3}gs;
    $text;
}

#
# For now, we just handle Perl Weekly Challenges
#

chomp (my @sources  = `find $SRC_DIR -name "*.md"`);
foreach my $source_file (@sources) {
    my $html_file = $source_file =~ s/^$SRC_DIR/$HTML_DIR/r
                                 =~ s/\.md$/.html/r;
    my ($week)    = $source_file =~ m{.*/week-(.*)\.md};
  # next if -f $html_file && (stat $html_file)   [9] >
  #                          (stat $source_file) [9]; # 9: mtime

    my $source_text = `cat $source_file`;

    $source_text = pre_process $source_text, $week;

    my $html_text   = markdown ($source_text => {
        empty_element_suffix => ">"
    });
    $html_text = "<body>$html_text</body>";

    $html_text = post_process ($html_text);

    my ($title) = $html_text =~ m{<h1>(.*?)</h1>};

    my $header = header ($title, $week);
    open my $fh, ">", $html_file or die "open $html_file: $!";
    print $fh <<~ "--";
        <html>
        $header
        $html_text
        </html>
        --
    close $fh or die "close $html_file: $!";
}

__END__
